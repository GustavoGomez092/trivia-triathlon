/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as WinnersIndexImport } from './routes/winners/index'
import { Route as WaitingRoomIndexImport } from './routes/waiting-room/index'
import { Route as SpectatorIndexImport } from './routes/spectator/index'
import { Route as PodiumIndexImport } from './routes/podium/index'
import { Route as PlayerScreenIndexImport } from './routes/player-screen/index'
import { Route as LoginIndexImport } from './routes/login/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WinnersIndexRoute = WinnersIndexImport.update({
  id: '/winners/',
  path: '/winners/',
  getParentRoute: () => rootRoute,
} as any)

const WaitingRoomIndexRoute = WaitingRoomIndexImport.update({
  id: '/waiting-room/',
  path: '/waiting-room/',
  getParentRoute: () => rootRoute,
} as any)

const SpectatorIndexRoute = SpectatorIndexImport.update({
  id: '/spectator/',
  path: '/spectator/',
  getParentRoute: () => rootRoute,
} as any)

const PodiumIndexRoute = PodiumIndexImport.update({
  id: '/podium/',
  path: '/podium/',
  getParentRoute: () => rootRoute,
} as any)

const PlayerScreenIndexRoute = PlayerScreenIndexImport.update({
  id: '/player-screen/',
  path: '/player-screen/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/player-screen/': {
      id: '/player-screen/'
      path: '/player-screen'
      fullPath: '/player-screen'
      preLoaderRoute: typeof PlayerScreenIndexImport
      parentRoute: typeof rootRoute
    }
    '/podium/': {
      id: '/podium/'
      path: '/podium'
      fullPath: '/podium'
      preLoaderRoute: typeof PodiumIndexImport
      parentRoute: typeof rootRoute
    }
    '/spectator/': {
      id: '/spectator/'
      path: '/spectator'
      fullPath: '/spectator'
      preLoaderRoute: typeof SpectatorIndexImport
      parentRoute: typeof rootRoute
    }
    '/waiting-room/': {
      id: '/waiting-room/'
      path: '/waiting-room'
      fullPath: '/waiting-room'
      preLoaderRoute: typeof WaitingRoomIndexImport
      parentRoute: typeof rootRoute
    }
    '/winners/': {
      id: '/winners/'
      path: '/winners'
      fullPath: '/winners'
      preLoaderRoute: typeof WinnersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/player-screen': typeof PlayerScreenIndexRoute
  '/podium': typeof PodiumIndexRoute
  '/spectator': typeof SpectatorIndexRoute
  '/waiting-room': typeof WaitingRoomIndexRoute
  '/winners': typeof WinnersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/player-screen': typeof PlayerScreenIndexRoute
  '/podium': typeof PodiumIndexRoute
  '/spectator': typeof SpectatorIndexRoute
  '/waiting-room': typeof WaitingRoomIndexRoute
  '/winners': typeof WinnersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login/': typeof LoginIndexRoute
  '/player-screen/': typeof PlayerScreenIndexRoute
  '/podium/': typeof PodiumIndexRoute
  '/spectator/': typeof SpectatorIndexRoute
  '/waiting-room/': typeof WaitingRoomIndexRoute
  '/winners/': typeof WinnersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/player-screen'
    | '/podium'
    | '/spectator'
    | '/waiting-room'
    | '/winners'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/player-screen'
    | '/podium'
    | '/spectator'
    | '/waiting-room'
    | '/winners'
  id:
    | '__root__'
    | '/'
    | '/login/'
    | '/player-screen/'
    | '/podium/'
    | '/spectator/'
    | '/waiting-room/'
    | '/winners/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  PlayerScreenIndexRoute: typeof PlayerScreenIndexRoute
  PodiumIndexRoute: typeof PodiumIndexRoute
  SpectatorIndexRoute: typeof SpectatorIndexRoute
  WaitingRoomIndexRoute: typeof WaitingRoomIndexRoute
  WinnersIndexRoute: typeof WinnersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  PlayerScreenIndexRoute: PlayerScreenIndexRoute,
  PodiumIndexRoute: PodiumIndexRoute,
  SpectatorIndexRoute: SpectatorIndexRoute,
  WaitingRoomIndexRoute: WaitingRoomIndexRoute,
  WinnersIndexRoute: WinnersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login/",
        "/player-screen/",
        "/podium/",
        "/spectator/",
        "/waiting-room/",
        "/winners/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/player-screen/": {
      "filePath": "player-screen/index.tsx"
    },
    "/podium/": {
      "filePath": "podium/index.tsx"
    },
    "/spectator/": {
      "filePath": "spectator/index.tsx"
    },
    "/waiting-room/": {
      "filePath": "waiting-room/index.tsx"
    },
    "/winners/": {
      "filePath": "winners/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
